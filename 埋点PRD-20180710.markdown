### 项目背景：

很多人、业务，都想知道自己的页面的访问量（包括UV、PV，访问者的UA，ip等），他们都有埋点的需求。

但对于他们来说，独自开发这个，比较耗时，并且涉及到的功能也比较多，因此如果有现成的、可用的，那么是极好的。

因此，这个需求是实际存在的，有必要去满足的。

---

### 项目目标：

做一款可以统计用户访问量的产品，要求简单易用。

基础功能包括常见的UV、PV、IP（推及所属省份）、访问时间等。

并且可以可视化的展示出来统计结果。

---

### 功能模块

1、注册功能：只有在注册范围之内的，才会被统计，非注册范围内的数据，会被丢弃。

* 注册是一个多级结构，每一级都归属于上一级；
* 最顶级是组织（用户，下称用户）：包含以下数据：
    * 这个用户的基本信息（如账号、密码、绑定手机、QQ等）；
    * 用户所拥有的站点（创建站点时，将数据插入）；
    * 用户可以访问的站点（修改站点、页面的权限时，将数据插入其中）；
* 第二级是站点：该用户可以注册多个站点，方便将以业务级来统计具体数据。站点级数据包括：
    * 站点的名字;
    * 站点编号（唯一，可不填，不填则自动生成）;
    * 站点描述；
    * 可以查看该站点数据的人（默认包含站点的创建者）；
    * 站点创建者；
    * 站点下包含页面（创建页面时，插入这里）；
* 第三级是页面：用户可以在站点下面，注册多个页面，页面注册时包括以下数据；
    * 页面所属站点（自动生成）；
    * 页面的url（问号之前的那一串，不包括 ``https?://`` 这部分；
    * 页面编号（唯一，可不填，不填则自动生成）；
    * 页面描述；
    * 页面创建者；
    * 可以访问该页面数据的人（新建页面时，默认包含可以访问站点数据的人，后期可修改）；
    * 页面下，存储功能模块的id；
* 第四级是功能模块：（初期不做）
    * 每个功能都要注册一个id；
    * 每个功能可选自己归属于哪个页面（用 页面id作为标志，并插入到对应页面中，注意，申请者需要有该页面id的写入权限）；
    * 每个功能都注册一个key，无法解析的key，或者解析后key不在注册范围内，或者value超长，则该条数据抛弃/值写为 ``_null_``；
    * 发送时，方式为：``/页面链接/id?key1=value1&key2=value2``



<br/>
于是我们可以得出：用户——》站点——》页面——》功能模块，四级关系。

* 每个用户可以知晓自己名下有哪些站点，有哪些站点、页面具有访问权限（因此可以直接访问到这些页面）；
* 每个站点，都会知晓自己下级有哪些页面，因此可以从站点获取到属于该站点的页面；
* 每个页面，都知道自己的上级是谁；
* 每个页面，都会有一个站点id + 页面id的组合。这个id组合，是发送埋点数据的关键；

最后，是功能模块，这个既可以独立于页面，又可以作为页面的下级。目前设计为独立于页面。

2、统计功能：

统计功能是前端来做，必须的数据有；

* 用户ID（如果用户已登录）；
* 用户IP（后端拿）；
* 用户UA（这个应该前端清洗后再丢给后端）；
* 访问时间（服务器端生成）；
* 用户浏览器类型；
* 站点ID（提前内嵌到页面中）；
* 页面ID（提前内嵌到页面中）；
* 页面URL；
* 一些性能数据；


3、服务器采集埋点数据：只有注册了的，才会被采集，未注册的，将会被丢弃；

统计时，是多级结构：

* 当埋点数据发送到服务器时，被解析为站点ID+页面ID，以及参数组合；
* 第一级，筛选：第一个面对的就是筛选，服务器初始会加载埋点的站点ID和页面ID。当服务器发现站点ID不符时，该条数据直接被丢弃（不需要返回数据，除非开启调试模式），当站点ID符合时，再取页面ID，同样，不符合就被丢弃，符合的进入下一步；
* 第二级，数据检查：参数符合要求的数据（不是每个字段都必填），将被认为是合法数据，会在接下来插入数据库，不符合的，log记录该条数据的页面ID和站点ID，以及时间，以备后续检查；
* 第三级，数据插入：将各个参数插入表中；

<br/>
此时，我们会得到一个具有大量访问数据的数据库表，该表以天为单位存储，每一天都是一张新表。

但是这个数据是不可直接被用户使用的，因此我们要洗数据。

4、洗数据：将数据清洗为可查阅的数据，减少非必要数据；

具体请查看下一步查阅数据；

5、数据查阅：只有可查阅可使用的数据，才是有效的数据；

数据查阅，暂定为两级：用户级，页面级；

**用户级**

* 每个站点一个表格，表格每行是一个页面，每行包括数据有：
    * 该页面最近一天的PV和UV，前一天的UV和PV；
    * 每个页面的访问链接（这个指原页面）；
    * 每个页面埋点详情的访问链接（这个指显示埋点页面的数据）；


**页面级**

* 图表：以小时为单位，统计每个小时的PV、UV；
* 图表：定时间范围内，每日的PV和UV；
* 表格：页面的日UV、PV；
* 表格：最近一天统计页面访问者IP来源省份（这个如果要调第三方接口就算了，最好找一个可本地判断的）；
* 表格：访问者的浏览器类型（UA数据的一部分）；


---

### 数据库层级划分（第四部分）

1. 存数据：将前端传来的数据，依次存到数据库之中，该数据成为原始数据；
2. 洗数据：将原始数据清洗，统计为我们实际可用的数据，并且存在数据库表之中，此时，存储的数据为可用数据；
3. 读数据：将可用数据读取并发送到前端，也可以是再次整合，例如将以小时/天为单位的数据，整合为以周、月为单位的数据；（本阶段可以和第五阶段——数据查阅相重合）

<br/>
之所以这么划分，是因为这种划分方法，可以解耦【存】和【洗】数据两步。在有必要的时候，我们可以随时更改洗数据的方法，这样就可以获得更高可定制化的数据结果了。

---

### 内容显示（第五部分）

即查看埋点数据，目前为了简化需求，只提供2个页面，数据内容只能查看pv和uv

**第一个页面**

查看该用户可以查看权限下，所有页面、站点的pv、uv，层级结构如下：

```
* 该用户访问的页面，此时是总览（每个页面含多个站点，每个站点是一个组件），页面是一个html
    * 站点级（每个站点含多个页面，每个页面是单独一个组件），站点是一个div，内含站点信息和一个table标签
        * 页面级：每个页面是table的一个tr标签，每个tr里有多个td标签，每个td标签是一项，初步定为，包含①页面名称；②页面超链接；③页面某日pv；④页面某日uv；⑤页面详情（跳转到第二个页面）
```


**第二个页面**

第二个页面显示该页面的详细数据，具体包含：

* 一个chart，显示该页面近一月每日的访问量（pv和uv）；
* 一个table，显示该页面每日的访问量（pv和uv）；